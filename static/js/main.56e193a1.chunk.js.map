{"version":3,"sources":["ItemList.js","MainMenu.js","Constants.js","Item360.js","Store.js","App.js","serviceWorker.js","index.js"],"names":["ItemList","props","className","items","map","e","num","selected","key","onClick","set","name","MainMenu","URL_DATA_TEST","process","API_URL_GET_ITEMS","API_URL_GET_IMAGES","Item360","React","useState","start","startIndex","drag","setDrag","dragging","setDragging","imageIndex","setImageIndex","quality","setQuality","image","setImage","handleMouseWheel","preventDefault","deltaY","item","qualitysize","getImage","then","handleMouseUp","handleMouseMove","currentPosition","numImages","size","pixelsPerImage","dx","index","Math","floor","updateImageIndex","screenX","useEffect","document","addEventListener","getElementById","removeEventListener","onMouseDown","persist","onDragStart","id","alt","src","Store","createContext","initialState","current","images","imager","state","action","type","payload","items_new","slice","images_new","App","useContext","dispatch","fetch","res","json","data","body","Array","apply","length","catch","console","log","fetchImage","Promise","resolve","Boolean","window","location","hostname","match","ReactDOM","render","useReducer","value","Provider","children","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQAkCeA,G,kBA7BE,SAACC,GAChB,OAAO,yBAAKC,UAAU,aACpB,yBAAKA,UAAU,mBAAf,aACCD,EAAME,MAAMC,KAAI,SAACC,EAAGC,GACnB,OAAGA,IAAQL,EAAMM,SAEb,yBACEC,IAAKF,EAAKJ,UAAU,0BACpBO,QAAS,kBAAMR,EAAMS,IAAIJ,KACzBD,EAAEM,MAIN,yBACEH,IAAKF,EAAKJ,UAAU,YACpBO,QAAS,kBAAMR,EAAMS,IAAIJ,KACzBD,EAAEM,YCPGC,G,MAVE,WACf,OACE,yBAAKV,UAAU,aACb,yBAAKA,UAAU,gBAAf,qCACA,yBAAKA,UAAU,gBAAf,kCACA,yBAAKA,UAAU,gBAAf,uC,OCAOW,G,MAAa,kBAAcC,iFAE3BC,EAAiB,iBAAaD,wBAAb,UACjBE,EAAkB,iBAAaF,wBAAb,WC+FhBG,EArGC,SAAChB,GAAW,IAAD,EACDiB,IAAMC,SAAS,CAACC,MAAO,EAAGC,WAAY,IADrC,mBAClBC,EADkB,KACZC,EADY,OAEOL,IAAMC,UAAS,GAFtB,mBAElBK,EAFkB,KAERC,EAFQ,OAGWP,IAAMC,SAAS,GAH1B,mBAGlBO,EAHkB,KAGNC,EAHM,OAIKT,IAAMC,SAAS,GAJpB,mBAIlBS,EAJkB,KAITC,EAJS,OAMCX,IAAMC,SAAS,iBANhB,mBAMlBW,EANkB,KAMXC,EANW,KAQnBC,EAAmB,SAAA3B,GACvBA,EAAE4B,iBAEC5B,EAAE6B,OAAS,GAAKN,EAAU3B,EAAMkC,KAAKC,YAAc,GACpDP,EAAWD,EAAU,GACrB3B,EAAMoC,SAASX,EAAYE,GAASU,KAAKP,IAChC1B,EAAE6B,OAAS,GAAKN,EAAU,IACnCC,EAAWD,EAAU,GACrB3B,EAAMoC,SAASX,EAAYE,GAASU,KAAKP,KAUvCQ,EAAgB,WACpBd,GAAY,IAsBRe,EAAkB,SAAAnC,GAClBmB,GApBmB,SAAAiB,GACvB,IAAMC,EAAYzC,EAAMkC,KAAKQ,KACvBC,EAAmC,IAAMF,EDtCrB,ECyCpBG,GAAMvB,EAAKF,MAAQqB,GAAmBG,EACxCE,EAAQC,KAAKC,MAAMH,GAAMH,EAEzBI,EAAQ,IACVA,EAAQJ,EAAYI,EAAQ,IAE9BA,GAASA,EAAQxB,EAAKD,YAAcqB,KAEtBhB,IACZC,EAAcmB,GACd7C,EAAMoC,SAASX,EAAYE,GAASU,KAAKP,IAMzCkB,CAAiB5C,EAAE6C,UAIvBhC,IAAMiC,WAAU,WACdlD,EAAMoC,SAASX,EAAYE,GAASU,KAAKP,KACxC,CAAC9B,EAAMoC,SAAUpC,EAAOyB,EAAYE,IAEvCV,IAAMiC,WAAU,WAId,OAHAC,SAASC,iBAAiB,YAAab,GAAiB,GACxDY,SAASC,iBAAiB,UAAWd,GAAe,GACpDa,SAASE,eAAe,WAAWD,iBAAiB,QAASrB,GAAkB,GACxE,WACLoB,SAASE,eAAe,WACrBC,oBAAoB,QAASvB,GAAkB,GAClDoB,SAASG,oBAAoB,YAAaf,GAAiB,GAC3DY,SAASG,oBAAoB,UAAWhB,GAAe,OAQ3D,OACE,yBAAKrC,UAAU,WACb,yBAAKA,UAAU,mBAAf,YAA2C0B,GAC3C,yBAAK1B,UAAU,kBACbsD,YA3DkB,SAAAnD,GACtBA,EAAEoD,UACFhC,GAAY,GACZF,EAAQ,CAACH,MAAOf,EAAE6C,QAAS7B,WAAYK,KAyDnCgC,YATqB,SAAArD,GACzBA,EAAE4B,kBASE0B,GAAG,WAEH,yBAAKzD,UAAU,YAAY0D,IAAI,GAAGC,IAAK/B,O,OC/ElCgC,EAAQ5C,IAAM6C,gBAErBC,EAAe,CACnBC,QAAS,EACT9D,MAAO,CAAC,CACNQ,KAAM,QACNgC,KAAM,EACNP,YAAa,EACb8B,OAAQ,CAAC,CAAC,CAAC,MAAS,kBAAmB,CAAC,CAAC,MAAS,sBAItD,SAASC,EAAOC,EAAOC,GAInB,OAAQA,EAAOC,MACb,IFvBkB,WEwBhB,OAAO,eAAIF,EAAX,CAAkBH,QAASI,EAAOE,UAEpC,IFvBwB,iBEwBtB,IAAMC,EAAYJ,EAAMjE,MAAMsE,QACxBC,EAAaF,EAAUJ,EAAMH,SAAhB,OAAmCQ,QAItD,OAHAC,EAAWL,EAAOE,QAAQ3C,SAASyC,EAAOE,QAAQzB,OAAlD,MACIuB,EAAOE,QAAQzC,MACnB0C,EAAUJ,EAAMH,SAAhB,OAAqCS,EAC9B,eAAKN,EAAZ,CAAmBjE,MAAOqE,IAE5B,IFjCoB,aEkClB,OAAO,eAAIJ,EAAX,CAAkBjE,MAAOkE,EAAOE,UAElC,IFvCoB,aEwClB,OAAO,eAAIH,EAAX,GAAqBC,EAAOE,SAE9B,QACE,OAAOH,GCyCAO,MArEf,WAAgB,IAAD,EACezD,IAAM0D,WAAWd,GAArCM,EADK,EACLA,MAAOS,EADF,EACEA,SAuDf,OArDA3D,IAAMiC,WAAU,WACd2B,MAAM/D,GACHuB,MAAK,SAAAyC,GAAG,OAAIA,EAAIC,UAChB1C,MAAK,SAAA2C,GAAI,OAAIA,EAAKC,KAAK9E,KAAI,SAAAC,GAAC,MAAK,CAChCM,KAAMN,EAAEM,KAAMgC,KAAMtC,EAAEsC,KAAMf,QAAS,EAAGQ,YAAa/B,EAAE+B,YACvD8B,OAAQiB,MAAMC,MAAM,KAAM,CAACC,OAAQhF,EAAE+B,cAAchC,KAAI,kBACrD+E,MAAMC,MAAM,KAAM,CAACC,OAAQhF,EAAEsC,OAAOvC,KAAI,iBAAO,CAAC,MAAS,iBAG5DkC,MAAK,SAAAnC,GACJ0E,EAAS,CAACP,KHzBQ,aGyBUC,QAASpE,OAEtCmF,OAAM,WACLR,MAAM,GAAD,OAAIjE,IACNyB,MAAK,SAAAyC,GAAG,OAAIA,EAAIC,UAChB1C,MAAK,SAAA2C,GAAI,OAAIJ,EAAS,CAACP,KHjCR,aGiC0BC,QAASU,OAClDK,MAAMC,QAAQC,UAEpB,CAACX,IAoCF,yBAAK3E,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEK,SAAU6D,EAAMH,QAChB9D,MAAOiE,EAAMjE,MACbO,IAAK,SAAAJ,GAAG,OAAIuE,EAAS,CAACP,KH3EN,WG2EsBC,QAASjE,OAEjD,kBAAC,EAAD,CAAS6B,KAAMiC,EAAMjE,MAAMiE,EAAMH,SAAU5B,SA3B9B,SAAC/B,EAAKsB,GAErB,IAAMO,EAAOiC,EAAMjE,MAAMiE,EAAMH,SAQ/B,OAPG3D,EAAM6B,EAAKQ,KAAO,IACnBrC,EAAM6B,EAAKQ,KAAO,GAEjBf,EAAUO,EAAKC,YAAc,IAC9BR,EAAUO,EAAKC,YAAc,GAGc,KAA1CD,EAAI,OAAWP,GAAStB,GAAxB,MAxBc,SAACA,EAAKsB,GACvB,IAAMO,EAAOiC,EAAMjE,MAAMiE,EAAMH,SAE/B,OAAOa,MAAM,GAAD,OAAI9D,EAAJ,YAA0BmB,EAAKxB,KAA/B,YAAuCiB,EAAvC,YAAkDtB,IAC3DgC,MAAK,SAAAyC,GAAG,OAAIA,EAAIC,UAChB1C,MAAK,SAAA2C,GAKJ,OAJAJ,EAAS,CACPP,KHxCoB,iBGyCpBC,QAAS,CAACzB,MAAOxC,EAAKsB,QAASA,EAASE,MAAOmD,EAAI,KAAJ,SAE1CA,EAAI,KAAJ,SAeFQ,CAAWnF,EAAKsB,GAEhB,IAAI8D,SAAQ,SAACC,GAClBA,EAAQxD,EAAI,OAAWP,GAAStB,GAAxB,eCxDIsF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,mBH0CK,SAAuBjG,GAAQ,IAAD,EACTiB,IAAMiF,WAAWhC,EAAQH,GADhB,mBAE7BoC,EAAQ,CAAEhC,MAFmB,KAEZS,SAFY,MAGnC,OACE,kBAACf,EAAMuC,SAAP,CAAgBD,MAAOA,GAAQnG,EAAMqG,YG9CvC,KACE,kBAAC,EAAD,OAEAlD,SAASE,eAAe,SDwHtB,kBAAmBiD,WACrBA,UAAUC,cAAcC,MAAMnE,MAAK,SAAAoE,GACjCA,EAAaC,kB","file":"static/js/main.56e193a1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ItemList.css';\n\nconst ItemList = (props) => {\n  return <div className='item-list'>\n    <div className='item-list-title'>item list</div>\n    {props.items.map((e, num) => {\n      if(num === props.selected) {\n        return (\n          <div\n            key={num} className='item-text item-selected'\n            onClick={() => props.set(num)}\n          >{e.name}</div>\n        );\n      }\n      return (\n        <div\n          key={num} className='item-text'\n          onClick={() => props.set(num)}\n        >{e.name}</div>\n      );\n    }\n    )}\n  </div>;\n};\n\nItemList.propTypes = {\n  items: PropTypes.array,\n  selected: PropTypes.number,\n  set: PropTypes.func\n};\n\nexport default ItemList;\n","import React  from 'react';\n\nimport './MainMenu.css';\n\nconst MainMenu = () => {\n  return (\n    <div className='main-menu'>\n      <div className='menu-element'>click on an item in the item list</div>\n      <div className='menu-element'>mouse down on the pic and move</div>\n      <div className='menu-element'>mouse down on the pic and scroll</div>\n    </div>\n  );\n}\n\nexport default MainMenu;\n","export const PIXELS_PER_DEG = 1;\n\nexport const STATE_LOAD = 'STATE_LOAD';\n\nexport const ITEM_SET = 'ITEM_SET';\nexport const ITEMS_LOAD = 'ITEMS_LOAD';\n\nexport const ITEM_IMAGE_SET = 'ITEM_IMAGE_SET';\n\nexport const URL_DATA_TEST = `https://${process.env.REACT_APP_DATA_TEST}`;\n\nexport const API_URL_GET_ITEMS = `http://${process.env.REACT_APP_API_URL}/items`;\nexport const API_URL_GET_IMAGES = `http://${process.env.REACT_APP_API_URL}/images`;\n","import React  from 'react';\nimport PropTypes from 'prop-types';\nimport './Item360.css';\n\nimport { PIXELS_PER_DEG } from './Constants';\n\nconst Item360 = (props) => {\n  const [drag, setDrag] = React.useState({start: 0, startIndex: 0});\n  const [dragging, setDragging] = React.useState(false);\n  const [imageIndex, setImageIndex] = React.useState(0);\n  const [quality, setQuality] = React.useState(0);\n\n  const [image, setImage] = React.useState('./loading.gif');\n\n  const handleMouseWheel = e => {\n    e.preventDefault();\n\n    if(e.deltaY < 0 && quality < props.item.qualitysize - 1) {\n      setQuality(quality + 1);\n      props.getImage(imageIndex, quality).then(setImage);\n    } else if (e.deltaY > 0 && quality > 0) {\n      setQuality(quality - 1);\n      props.getImage(imageIndex, quality).then(setImage);\n    }\n  };\n\n  const handleMouseDown = e => {\n    e.persist();\n    setDragging(true);\n    setDrag({start: e.screenX, startIndex: imageIndex});\n  };\n\n  const handleMouseUp = () => {\n    setDragging(false);\n  };\n\n  const updateImageIndex = currentPosition => {\n    const numImages = props.item.size;\n    const pixelsPerImage = PIXELS_PER_DEG * (360 / numImages);\n\n    // pixels moved\n    const dx = (drag.start - currentPosition) / pixelsPerImage;\n    let index = Math.floor(dx) % numImages;\n\n    if (index < 0) {\n      index = numImages + index - 1;\n    }\n    index = (index + drag.startIndex) % numImages;\n\n    if (index !== imageIndex) {\n      setImageIndex(index);\n      props.getImage(imageIndex, quality).then(setImage);\n    }\n  };\n\n  const handleMouseMove = e => {\n    if (dragging) {\n      updateImageIndex(e.screenX);\n    }\n  };\n\n  React.useEffect(() => {\n    props.getImage(imageIndex, quality).then(setImage);\n  }, [props.getImage, props, imageIndex, quality]);\n\n  React.useEffect(() => {\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', handleMouseUp, false);\n    document.getElementById('item360').addEventListener('wheel', handleMouseWheel, false);\n    return () => {\n      document.getElementById('item360')\n        .removeEventListener('wheel', handleMouseWheel, false);\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', handleMouseUp, false);\n    };\n  });\n\n  const preventDragHandler = e => {\n    e.preventDefault();\n  };\n\n  return (\n    <div className='item360'>\n      <div className='item360-quality'>quality: {quality}</div>\n      <div className='image-container'\n        onMouseDown={handleMouseDown}\n        onDragStart={preventDragHandler}\n        id='item360'\n      >\n        <img className='image-360' alt='' src={image} />\n      </div>\n    </div>\n  );\n}\n\nItem360.propTypes = {\n  item: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    size: PropTypes.number.isRequired,\n    qualitysize: PropTypes.number.isRequired,\n    images: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.shape({\n      image: PropTypes.string\n    })))\n  }),\n  getImage: PropTypes.func\n};\n\nexport default Item360;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  STATE_LOAD,\n  ITEM_SET,\n  ITEMS_LOAD,\n  ITEM_IMAGE_SET\n} from './Constants.js';\n\nexport const Store = React.createContext();\n\nconst initialState = {\n  current: 0,\n  items: [{\n    name: 'empty',\n    size: 1,\n    qualitysize: 1,\n    images: [[{'image': './loading.gif'}], [{'image': './loading.gif'}]]\n  }]\n};\n\nfunction imager(state, action) {\n    //console.log('action: ', action);\n    //console.log('state: ', state);\n\n    switch (action.type) {\n      case ITEM_SET: {\n        return {...state, current: action.payload};\n      }\n      case ITEM_IMAGE_SET: {\n        const items_new = state.items.slice()\n        const images_new = items_new[state.current]['images'].slice();\n        images_new[action.payload.quality][action.payload.index]['image']\n          = action.payload.image;\n        items_new[state.current]['images'] = images_new;\n        return { ...state, items: items_new};\n      }\n      case ITEMS_LOAD: {\n        return {...state, items: action.payload};\n      }\n      case STATE_LOAD: {\n        return {...state, ...action.payload};\n      }\n      default: {\n        return state;\n      }\n    }\n}\n\nexport function StoreProvider(props) {\n  const [state, dispatch] = React.useReducer(imager, initialState);\n  const value = { state, dispatch };\n  return (\n    <Store.Provider value={value}>{props.children}</Store.Provider>\n  );\n}\n\nStoreProvider.propTypes = {\n  children: PropTypes.object\n};\n","import React from 'react';\nimport './App.css';\nimport ItemList from './ItemList';\nimport MainMenu from './MainMenu';\nimport Item360 from './Item360';\n\nimport { Store } from './Store';\nimport {\n  STATE_LOAD,\n  ITEM_SET,\n  ITEMS_LOAD,\n  ITEM_IMAGE_SET,\n  API_URL_GET_ITEMS,\n  API_URL_GET_IMAGES,\n  URL_DATA_TEST\n} from './Constants';\n\nfunction App() {\n  const { state, dispatch } = React.useContext(Store);\n\n  React.useEffect(() => {\n    fetch(API_URL_GET_ITEMS)\n      .then(res => res.json())\n      .then(data => data.body.map(e => ({\n        name: e.name, size: e.size, quality: 0, qualitysize: e.qualitysize,\n        images: Array.apply(null, {length: e.qualitysize}).map(() =>\n          Array.apply(null, {length: e.size}).map(() => ({'image': ''}))\n        ),\n      })))\n      .then(items => {\n        dispatch({type: ITEMS_LOAD, payload: items});\n      })\n      .catch(() => {\n        fetch(`${URL_DATA_TEST}`)\n          .then(res => res.json())\n          .then(data => dispatch({type: STATE_LOAD, payload: data}))\n          .catch(console.log);\n      });\n  }, [dispatch]);\n\n  const fetchImage = (num, quality) => {\n    const item = state.items[state.current];\n\n    return fetch(`${API_URL_GET_IMAGES}/${item.name}/${quality}/${num}`)\n      .then(res => res.json())\n      .then(data => {\n        dispatch({\n          type: ITEM_IMAGE_SET,\n          payload: {index: num, quality: quality, image: data['body']['image']}\n        });\n        return data['body']['image'];\n      });\n  };\n\n  const getImage = (num, quality) => {\n\n    const item = state.items[state.current];\n    if(num > item.size - 1) {\n      num = item.size - 1;\n    }\n    if(quality > item.qualitysize - 1){\n      quality = item.qualitysize - 1;\n    }\n\n    if(item['images'][quality][num]['image'] === '') {\n      return fetchImage(num, quality);\n    } else {\n      return new Promise((resolve) => {\n        resolve(item['images'][quality][num]['image']);\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <MainMenu/>\n      <ItemList\n        selected={state.current}\n        items={state.items}\n        set={num => dispatch({type: ITEM_SET, payload: num})}\n      />\n      <Item360 item={state.items[state.current]} getImage={getImage}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StoreProvider } from './Store';\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>\n  , document.getElementById('root')); \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}